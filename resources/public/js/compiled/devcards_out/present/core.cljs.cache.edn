{:rename-macros {}, :renames {}, :use-macros {deftest devcards.core, defcard devcards.core}, :excludes #{}, :name present.core, :imports nil, :requires {patterning.sshapes patterning.sshapes, patterning.view patterning.view, groups patterning.groups, std patterning.library.std, patterning.library.std patterning.library.std, patterning.groups patterning.groups, reagent.core reagent.core, r reagent.core, patterning.color patterning.color, sablono.core sablono.core, patterning.layouts patterning.layouts, sab sablono.core, layouts patterning.layouts, sshapes patterning.sshapes}, :uses {p-color patterning.color, make-svg patterning.view}, :defs {contas-component {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/src/present/core.cljs", :line 332, :column 7, :end-line 332, :end-column 23, :arglists (quote ([orc]))}, :name present.core/contas-component, :variadic false, :file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/src/present/core.cljs", :end-column 23, :method-params ([orc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([orc]))}, main {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/src/present/core.cljs", :line 365, :column 7, :end-line 365, :end-column 11, :arglists (quote ([]))}, :name present.core/main, :variadic false, :file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/src/present/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:y :path :stroke-weight :nome :stroke :func :name :with-let44477 :documentation :card :with-let44464 :main-obj :present.core :initial-data :idade :options :x :heading}, :order [:path :func :present.core :card :name :documentation :main-obj :initial-data :options :heading :x :y :nome :idade :stroke :stroke-weight :with-let44464 :with-let44477]}, :doc nil}
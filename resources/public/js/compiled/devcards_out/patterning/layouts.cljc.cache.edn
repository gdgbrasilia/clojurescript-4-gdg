{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name patterning.layouts, :imports nil, :requires {maths patterning.maths, patterning.maths patterning.maths, groups patterning.groups, patterning.groups patterning.groups}, :uses nil, :defs {grid-layout-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 27, :column 7, :end-line 27, :end-column 28, :arglists (quote ([number])), :doc "calculates the positions for a grid layout"}, :name patterning.layouts/grid-layout-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 28, :method-params ([number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([number])), :doc "calculates the positions for a grid layout"}, h-mirror {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 182, :column 7, :end-line 182, :end-column 15, :arglists (quote ([group])), :doc "Reflect horizontally and stretch"}, :name patterning.layouts/h-mirror, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 15, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "Reflect horizontally and stretch"}, one-row-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 152, :column 7, :end-line 152, :end-column 21, :arglists (quote ([n i groups1 groups2])), :doc "uses one-x-layout with rows"}, :name patterning.layouts/one-row-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 21, :method-params ([n i groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n i groups1 groups2])), :doc "uses one-x-layout with rows"}, diamond-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 101, :column 7, :end-line 101, :end-column 21, :arglists (quote ([n groups])), :doc "Like half-drop"}, :name patterning.layouts/diamond-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 21, :method-params ([n groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n groups])), :doc "Like half-drop"}, checked-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 136, :column 7, :end-line 136, :end-column 21, :arglists (quote ([number groups1 groups2])), :doc "does checks using grid layout"}, :name patterning.layouts/checked-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 21, :method-params ([number groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([number groups1 groups2])), :doc "does checks using grid layout"}, four-round {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 213, :column 7, :end-line 213, :end-column 17, :arglists (quote ([group])), :doc "Four squares rotated"}, :name patterning.layouts/four-round, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 17, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "Four squares rotated"}, random-turn-groups {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 109, :column 7, :end-line 109, :end-column 25, :arglists (quote ([groups]))}, :name patterning.layouts/random-turn-groups, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 25, :method-params ([groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([groups]))}, drop-every {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 124, :column 7, :end-line 124, :end-column 17, :arglists (quote ([n xs]))}, :name patterning.layouts/drop-every, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 17, :method-params ([n xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n xs]))}, grid-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 95, :column 7, :end-line 95, :end-column 18, :arglists (quote ([n groups])), :doc "Takes an n and a group-stream and returns items from the group-stream in an n X n grid "}, :name patterning.layouts/grid-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 18, :method-params ([n groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n groups])), :doc "Takes an n and a group-stream and returns items from the group-stream in an n X n grid "}, check-seq {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 127, :column 7, :end-line 127, :end-column 16, :arglists (quote ([n groups1 groups2])), :doc "returns the appropriate lazy seq of groups for constructing a checked-layout"}, :name patterning.layouts/check-seq, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 16, :method-params ([n groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n groups1 groups2])), :doc "returns the appropriate lazy seq of groups for constructing a checked-layout"}, alt-rows {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 163, :column 7, :end-line 163, :end-column 15, :arglists (quote ([n groups1 groups2])), :doc "Fills a group-stream with rows from alternative group-streams"}, :name patterning.layouts/alt-rows, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 15, :method-params ([n groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n groups1 groups2])), :doc "Fills a group-stream with rows from alternative group-streams"}, sshape-to-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 255, :column 7, :end-line 255, :end-column 26, :arglists (quote ([{:keys [style points], :as sshape}]))}, :name patterning.layouts/sshape-to-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 26, :method-params ([p__35128]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points], :as sshape}]))}, cart {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 21, :column 7, :end-line 21, :end-column 11, :arglists (quote ([colls])), :doc "Cartesian Product of two collections"}, :name patterning.layouts/cart, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 11, :method-params ([colls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([colls])), :doc "Cartesian Product of two collections"}, frame {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 223, :column 7, :end-line 223, :end-column 12, :arglists (quote ([grid-size corners edges])), :doc "Frames consist of corners and edges. "}, :name patterning.layouts/frame, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 12, :method-params ([grid-size corners edges]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grid-size corners edges])), :doc "Frames consist of corners and edges. "}, framed {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 240, :column 7, :end-line 240, :end-column 13, :arglists (quote ([grid-size corners edges inner])), :doc "Puts a frame around the other group"}, :name patterning.layouts/framed, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 13, :method-params ([grid-size corners edges inner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 4, :fn-var true, :arglists (quote ([grid-size corners edges inner])), :doc "Puts a frame around the other group"}, half-drop-grid-layout-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 39, :column 7, :end-line 39, :end-column 38, :arglists (quote ([number])), :doc "Like a grid but with a half-drop every other column"}, :name patterning.layouts/half-drop-grid-layout-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 38, :method-params ([number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([number])), :doc "Like a grid but with a half-drop every other column"}, ring {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 198, :column 7, :end-line 198, :end-column 11, :arglists (quote ([n offset groups])), :doc "Better clock-rotate"}, :name patterning.layouts/ring, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 11, :method-params ([n offset groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n offset groups])), :doc "Better clock-rotate"}, scale-group-stream {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 93, :column 7, :end-line 93, :end-column 25, :arglists (quote ([n groups]))}, :name patterning.layouts/scale-group-stream, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 25, :method-params ([n groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n groups]))}, diamond-layout-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 63, :column 7, :end-line 63, :end-column 31, :arglists (quote ([number])), :doc "Diamond grid, actually created like a half-drop"}, :name patterning.layouts/diamond-layout-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 31, :method-params ([number]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([number])), :doc "Diamond grid, actually created like a half-drop"}, alt-cols-grid-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 167, :column 7, :end-line 167, :end-column 27, :arglists (quote ([n groups1 groups2])), :doc "Every other column from two streams"}, :name patterning.layouts/alt-cols-grid-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 27, :method-params ([n groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n groups1 groups2])), :doc "Every other column from two streams"}, four-mirror {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 175, :column 7, :end-line 175, :end-column 18, :arglists (quote ([group])), :doc "Four-way mirroring. Returns the group repeated four times reflected vertically and horizontall"}, :name patterning.layouts/four-mirror, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 18, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "Four-way mirroring. Returns the group repeated four times reflected vertically and horizontall"}, half-drop-grid-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 98, :column 7, :end-line 98, :end-column 28, :arglists (quote ([n groups])), :doc "Like grid but with half-drop"}, :name patterning.layouts/half-drop-grid-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 28, :method-params ([n groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n groups])), :doc "Like grid but with half-drop"}, q1-rot-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 104, :column 7, :end-line 104, :end-column 19, :arglists (quote ([group]))}, :name patterning.layouts/q1-rot-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, q2-rot-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 105, :column 7, :end-line 105, :end-column 19, :arglists (quote ([group]))}, :name patterning.layouts/q2-rot-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, flower-of-life-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 248, :column 7, :end-line 248, :end-column 31, :arglists (quote ([r depth [cx cy]]))}, :name patterning.layouts/flower-of-life-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 31, :method-params ([r depth p__35121]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 3, :fn-var true, :arglists (quote ([r depth [cx cy]]))}, clock-rotate {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 192, :column 7, :end-line 192, :end-column 19, :arglists (quote ([n group])), :doc "Circular layout. Returns n copies in a rotation"}, :name patterning.layouts/clock-rotate, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([n group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n group])), :doc "Circular layout. Returns n copies in a rotation"}, one-col-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 156, :column 7, :end-line 156, :end-column 21, :arglists (quote ([n i groups1 groups2])), :doc "uses one-x-layout with rows"}, :name patterning.layouts/one-col-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 21, :method-params ([n i groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n i groups1 groups2])), :doc "uses one-x-layout with rows"}, superimpose-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 9, :column 7, :end-line 9, :end-column 25, :arglists (quote ([group1 group2])), :doc "simplest layout, two groups located on top of each other "}, :name patterning.layouts/superimpose-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 25, :method-params ([group1 group2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group1 group2])), :doc "simplest layout, two groups located on top of each other "}, random-grid-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 120, :column 7, :end-line 120, :end-column 25, :arglists (quote ([n groups])), :doc "Takes a group and returns a grid with random quarter rotations"}, :name patterning.layouts/random-grid-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 25, :method-params ([n groups]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n groups])), :doc "Takes a group and returns a grid with random quarter rotations"}, sshape-as-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 257, :column 7, :end-line 257, :end-column 23, :arglists (quote ([sshape group-stream scalar]))}, :name patterning.layouts/sshape-as-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 23, :method-params ([sshape group-stream scalar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sshape group-stream scalar]))}, alt-rows-grid-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 170, :column 7, :end-line 170, :end-column 27, :arglists (quote ([n groups1 groups2])), :doc "Every other row from two streams"}, :name patterning.layouts/alt-rows-grid-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 27, :method-params ([n groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n groups1 groups2])), :doc "Every other row from two streams"}, place-groups-at-positions {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 89, :column 7, :end-line 89, :end-column 32, :arglists (quote ([groups positions])), :doc "Takes a list of groups and a list of positions and puts one of the groups at each position"}, :name patterning.layouts/place-groups-at-positions, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 32, :method-params ([groups positions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([groups positions])), :doc "Takes a list of groups and a list of positions and puts one of the groups at each position"}, one-x-layout {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 141, :column 7, :end-line 141, :end-column 19, :arglists (quote ([n i f groups1 groups2])), :doc "Takes a total number of rows, an index i and two group-streams.\n   Makes an n X n square where row or col i is from group-stream2 and everything else is group-stream1"}, :name patterning.layouts/one-x-layout, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([n i f groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 5, :fn-var true, :arglists (quote ([n i f groups1 groups2])), :doc "Takes a total number of rows, an index i and two group-streams.\n   Makes an n X n square where row or col i is from group-stream2 and everything else is group-stream1"}, v-mirror {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 187, :column 7, :end-line 187, :end-column 15, :arglists (quote ([group])), :doc "Reflect vertically and stretch"}, :name patterning.layouts/v-mirror, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 15, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "Reflect vertically and stretch"}, nested-stack {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 15, :column 7, :end-line 15, :end-column 19, :arglists (quote ([styles group reducer])), :doc "superimpose smaller copies of a shape"}, :name patterning.layouts/nested-stack, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([styles group reducer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([styles group reducer])), :doc "superimpose smaller copies of a shape"}, stack {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([& groups])), :doc "superimpose a number of groups", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(groups)], :arglists ([& groups]), :arglists-meta (nil)}}, :name patterning.layouts/stack, :variadic true, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(groups)], :arglists ([& groups]), :arglists-meta (nil)}, :method-params [(groups)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists ([& groups]), :doc "superimpose a number of groups"}, alt-cols {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 159, :column 7, :end-line 159, :end-column 15, :arglists (quote ([n groups1 groups2])), :doc "Fills a group-stream with cols from alternative group-streams"}, :name patterning.layouts/alt-cols, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 15, :method-params ([n groups1 groups2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n groups1 groups2])), :doc "Fills a group-stream with cols from alternative group-streams"}, q3-rot-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :line 106, :column 7, :end-line 106, :end-column 19, :arglists (quote ([group]))}, :name patterning.layouts/q3-rot-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/layouts.cljc", :end-column 19, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:points :style}, :order [:style :points]}, :doc nil}
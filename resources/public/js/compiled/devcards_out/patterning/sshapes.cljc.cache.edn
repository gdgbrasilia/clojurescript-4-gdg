{:rename-macros {}, :renames {}, :use-macros {optional-styled-primitive patterning.macros}, :excludes #{}, :name patterning.sshapes, :imports nil, :requires {maths patterning.maths, patterning.maths patterning.maths, clojure.data clojure.data}, :uses {diff clojure.data}, :defs {close-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([points])), :doc "Closes an open shape"}, :name patterning.sshapes/close-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points])), :doc "Closes an open shape"}, rotate-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([da shape]))}, :name patterning.sshapes/rotate-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([da shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([da shape]))}, h-reflect {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 96, :column 7, :end-line 96, :end-column 16, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/h-reflect, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([p__34709]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, triangles-list {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 126, :column 7, :end-line 126, :end-column 21, :arglists (quote ([points]))}, :name patterning.sshapes/triangles-list, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 21, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, stretch {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 98, :column 7, :end-line 98, :end-column 14, :arglists (quote ([sx sy sshape]))}, :name patterning.sshapes/stretch, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 14, :method-params ([sx sy sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sx sy sshape]))}, ends {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 38, :column 7, :end-line 38, :end-column 11, :arglists (quote ([shape])), :doc "the start and end point of a shape"}, :name patterning.sshapes/ends, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 11, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape])), :doc "the start and end point of a shape"}, to-triangles {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 136, :column 7, :end-line 136, :end-column 19, :arglists (quote ([{:keys [style points], :as original-shape}]))}, :name patterning.sshapes/to-triangles, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([p__34759]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points], :as original-shape}]))}, rightmost {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 113, :column 7, :end-line 113, :end-column 16, :arglists (quote ([sshape]))}, :name patterning.sshapes/rightmost, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, height {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 116, :column 7, :end-line 116, :end-column 13, :arglists (quote ([sshape]))}, :name patterning.sshapes/height, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, leftmost {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 112, :column 7, :end-line 112, :end-column 15, :arglists (quote ([sshape]))}, :name patterning.sshapes/leftmost, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 15, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, add-style {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 84, :column 7, :end-line 84, :end-column 16, :arglists (quote ([new-style {:keys [style points]}]))}, :name patterning.sshapes/add-style, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([new-style p__34694]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-style {:keys [style points]}]))}, v-reflect {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 97, :column 7, :end-line 97, :end-column 16, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/v-reflect, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([p__34714]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, set-fill {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([fill sshape])), :doc "Give a fill-color to a sshape"}, :name patterning.sshapes/set-fill, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 15, :method-params ([fill sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fill sshape])), :doc "Give a fill-color to a sshape"}, set-weight {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 86, :column 7, :end-line 86, :end-column 17, :arglists (quote ([weight sshape])), :doc "Give new strokeWeight to a sshape"}, :name patterning.sshapes/set-weight, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 17, :method-params ([weight sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([weight sshape])), :doc "Give new strokeWeight to a sshape"}, scale-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 13, :column 7, :end-line 13, :end-column 18, :arglists (quote ([val shape]))}, :name patterning.sshapes/scale-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :method-params ([val shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([val shape]))}, tie-together {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([shape1 shape2])), :doc "Merge two open shapes together, by choosing the ends that are closest"}, :name patterning.sshapes/tie-together, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([shape1 shape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape1 shape2])), :doc "Merge two open shapes together, by choosing the ends that are closest"}, ->SShape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 78, :column 12, :end-line 78, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([style points]))}, :name patterning.sshapes/->SShape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :method-params ([style points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([style points]))}, set-color {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 85, :column 7, :end-line 85, :end-column 16, :arglists (quote ([c sshape])), :doc "Give new color to a sshape "}, :name patterning.sshapes/set-color, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([c sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c sshape])), :doc "Give new color to a sshape "}, bottom {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 111, :column 7, :end-line 111, :end-column 13, :arglists (quote ([sshape]))}, :name patterning.sshapes/bottom, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, wobble-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 36, :column 7, :end-line 36, :end-column 19, :arglists (quote ([noise shape]))}, :name patterning.sshapes/wobble-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([noise shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([noise shape]))}, mol= {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 121, :column 7, :end-line 121, :end-column 11, :arglists (quote ([sshape1 sshape2])), :doc "more or less equal sshapes"}, :name patterning.sshapes/mol=, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 11, :method-params ([sshape1 sshape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sshape1 sshape2])), :doc "more or less equal sshapes"}, ss-filter {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 118, :column 7, :end-line 118, :end-column 16, :arglists (quote ([p? {:keys [style points]}]))}, :name patterning.sshapes/ss-filter, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([p? p__34744]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? {:keys [style points]}]))}, scale {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 94, :column 7, :end-line 94, :end-column 12, :arglists (quote ([val sshape]))}, :name patterning.sshapes/scale, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 12, :method-params ([val sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([val sshape]))}, top {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 110, :column 7, :end-line 110, :end-column 10, :arglists (quote ([sshape]))}, :name patterning.sshapes/top, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 10, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, translate-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 16, :column 7, :end-line 16, :end-column 22, :arglists (quote ([dx dy shape]))}, :name patterning.sshapes/translate-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 22, :method-params ([dx dy shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dx dy shape]))}, SShape {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name patterning.sshapes/SShape, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :type true, :column 12, :internal-ctor true, :line 78, :record true, :end-line 78, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, h-reflect-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 22, :column 7, :end-line 22, :end-column 22, :arglists (quote ([shape]))}, :name patterning.sshapes/h-reflect-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 22, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, is-ear {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 129, :column 7, :end-line 129, :end-column 13, :arglists (quote ([{:keys [style points]} t]))}, :name patterning.sshapes/is-ear, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([p__34754 t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [style points]} t]))}, add-property {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 71, :column 7, :end-line 71, :end-column 19, :arglists (quote ([style prop val]))}, :name patterning.sshapes/add-property, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([style prop val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 3, :fn-var true, :arglists (quote ([style prop val]))}, width {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 115, :column 7, :end-line 115, :end-column 12, :arglists (quote ([sshape]))}, :name patterning.sshapes/width, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 12, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape]))}, reverse-order {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 103, :column 7, :end-line 103, :end-column 20, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/reverse-order, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 20, :method-params ([p__34724]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, bez-curve {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 92, :column 7, :end-line 92, :end-column 16, :arglists (quote ([style points]))}, :name patterning.sshapes/bez-curve, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([style points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([style points]))}, h-glue-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 55, :column 7, :end-line 55, :end-column 19, :arglists (quote ([shape1 shape2])), :doc "repeats a shape horizontally"}, :name patterning.sshapes/h-glue-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([shape1 shape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape1 shape2])), :doc "repeats a shape horizontally"}, xs {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 107, :column 7, :end-line 107, :end-column 9, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/xs, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 9, :method-params ([p__34734]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, flat-point-list {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 105, :column 7, :end-line 105, :end-column 22, :arglists (quote ([{:keys [style points], :as sshape}]))}, :name patterning.sshapes/flat-point-list, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 22, :method-params ([p__34729]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points], :as sshape}]))}, empty-sshape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([]))}, :name patterning.sshapes/empty-sshape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stretch-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([sx sy shape]))}, :name patterning.sshapes/stretch-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 20, :method-params ([sx sy shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sx sy shape]))}, points-to-polars {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 30, :column 7, :end-line 30, :end-column 23, :arglists (quote ([points]))}, :name patterning.sshapes/points-to-polars, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 23, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, ys {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 108, :column 7, :end-line 108, :end-column 9, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/ys, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 9, :method-params ([p__34739]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, polars-to-points {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 31, :column 7, :end-line 31, :end-column 23, :arglists (quote ([polars]))}, :name patterning.sshapes/polars-to-points, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 23, :method-params ([polars]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([polars]))}, hide {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 88, :column 7, :end-line 88, :end-column 11, :arglists (quote ([sshape])), :doc "Keep this sshape in the pattern but disable it from rendering"}, :name patterning.sshapes/hide, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 11, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape])), :doc "Keep this sshape in the pattern but disable it from rendering"}, v-reflect-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 25, :column 7, :end-line 25, :end-column 22, :arglists (quote ([shape]))}, :name patterning.sshapes/v-reflect-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 22, :method-params ([shape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([shape]))}, map->SShape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 78, :column 12, :end-line 78, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__34688]))}, :name patterning.sshapes/map->SShape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :method-params ([G__34688]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__34688]))}, unhide {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 89, :column 7, :end-line 89, :end-column 13, :arglists (quote ([sshape])), :doc "Remove the hidden label from a sshape, so it's shown"}, :name patterning.sshapes/unhide, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape])), :doc "Remove the hidden label from a sshape, so it's shown"}, triple-list {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 125, :column 7, :end-line 125, :end-column 18, :arglists (quote ([points]))}, :name patterning.sshapes/triple-list, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 18, :method-params ([points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([points]))}, wobble {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 101, :column 7, :end-line 101, :end-column 13, :arglists (quote ([noise {:keys [style points]}]))}, :name patterning.sshapes/wobble, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([noise p__34719]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([noise {:keys [style points]}]))}, hidden? {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 90, :column 7, :end-line 90, :end-column 14, :arglists (quote ([{:keys [style points]}])), :doc "Test if a sshape is hidden"}, :name patterning.sshapes/hidden?, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 14, :method-params ([p__34699]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}])), :doc "Test if a sshape is hidden"}, triangles-in-sshape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 127, :column 7, :end-line 127, :end-column 26, :arglists (quote ([{:keys [style points]}]))}, :name patterning.sshapes/triangles-in-sshape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 26, :method-params ([p__34749]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, mol=shapes {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 62, :column 7, :end-line 62, :end-column 17, :arglists (quote ([shape1 shape2])), :doc "more or less equal shapes"}, :name patterning.sshapes/mol=shapes, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 17, :method-params ([shape1 shape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([shape1 shape2])), :doc "more or less equal shapes"}, filter-shape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([f? ps]))}, :name patterning.sshapes/filter-shape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 19, :method-params ([f? ps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f? ps]))}, rotate {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 99, :column 7, :end-line 99, :end-column 13, :arglists (quote ([da sshape]))}, :name patterning.sshapes/rotate, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 13, :method-params ([da sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([da sshape]))}, translate {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :line 95, :column 7, :end-line 95, :end-column 16, :arglists (quote ([dx dy {:keys [style points]}]))}, :name patterning.sshapes/translate, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/sshapes.cljc", :end-column 16, :method-params ([dx dy p__34704]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dx dy {:keys [style points]}]))}}, :require-macros {patterning.macros patterning.macros}, :cljs.analyzer/constants {:seen #{:bezier :stroke-weight :stroke :else :fill :B :points :style :hidden points style}, :order [:else :style :points style points :stroke :stroke-weight :fill :hidden :bezier :B]}, :doc nil}
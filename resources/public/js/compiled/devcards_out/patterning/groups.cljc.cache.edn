{:rename-macros {}, :renames {}, :use-macros {union clojure.set}, :excludes #{}, :name patterning.groups, :imports nil, :requires {maths patterning.maths, patterning.maths patterning.maths, sshapes patterning.sshapes, patterning.sshapes patterning.sshapes, clojure.set clojure.set}, :uses {union clojure.set}, :defs {reframe {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 78, :column 7, :end-line 78, :end-column 14, :arglists (quote ([group]))}, :name patterning.groups/reframe, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 14, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, h-reflect {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([group]))}, :name patterning.groups/h-reflect, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 16, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, stretch {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([sx sy group]))}, :name patterning.groups/stretch, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 14, :method-params ([sx sy group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([sx sy group]))}, rightmost {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 63, :column 7, :end-line 63, :end-column 16, :arglists (quote ([group]))}, :name patterning.groups/rightmost, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 16, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, height {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 67, :column 7, :end-line 67, :end-column 13, :arglists (quote ([group]))}, :name patterning.groups/height, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 13, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, leftmost {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 62, :column 7, :end-line 62, :end-column 15, :arglists (quote ([group]))}, :name patterning.groups/leftmost, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 15, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, v-reflect {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([group]))}, :name patterning.groups/v-reflect, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 16, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, clip {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 111, :column 7, :end-line 111, :end-column 11, :arglists (quote ([p? group])), :doc "clips all sshapes in a group"}, :name patterning.groups/clip, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 11, :method-params ([p? group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? group])), :doc "clips all sshapes in a group"}, group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([& sshapes])), :doc "a vector of sshapes", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(sshapes)], :arglists ([& sshapes]), :arglists-meta (nil)}}, :name patterning.groups/group, :variadic true, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(sshapes)], :arglists ([& sshapes]), :arglists-meta (nil)}, :method-params [(sshapes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists ([& sshapes]), :doc "a vector of sshapes"}, h-centre {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 69, :column 7, :end-line 69, :end-column 15, :arglists (quote ([group])), :doc "Assumes group is taller than wide so move it to horizontal centre"}, :name patterning.groups/h-centre, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 15, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group])), :doc "Assumes group is taller than wide so move it to horizontal centre"}, bottom {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 66, :column 7, :end-line 66, :end-column 13, :arglists (quote ([group]))}, :name patterning.groups/bottom, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 13, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, style-attribute-set {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 43, :column 7, :end-line 43, :end-column 26, :arglists (quote ([group attribute]))}, :name patterning.groups/style-attribute-set, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 26, :method-params ([group attribute]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group attribute]))}, filter-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 88, :column 7, :end-line 88, :end-column 19, :arglists (quote ([p? group]))}, :name patterning.groups/filter-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 19, :method-params ([p? group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? group]))}, mol= {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 115, :column 7, :end-line 115, :end-column 11, :arglists (quote ([group1 group2])), :doc "more or less equal groups"}, :name patterning.groups/mol=, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 11, :method-params ([group1 group2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([group1 group2])), :doc "more or less equal groups"}, extract-points {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 41, :column 7, :end-line 41, :end-column 21, :arglists (quote ([{:keys [style points]}]))}, :name patterning.groups/extract-points, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 21, :method-params ([p__34915]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [style points]}]))}, scale {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 24, :column 7, :end-line 24, :end-column 12, :arglists (quote ([val group]))}, :name patterning.groups/scale, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 12, :method-params ([val group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([val group]))}, top {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 65, :column 7, :end-line 65, :end-column 10, :arglists (quote ([group]))}, :name patterning.groups/top, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 10, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, over-style {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([style group])), :doc "Changes the style of a group"}, :name patterning.groups/over-style, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 17, :method-params ([style group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([style group])), :doc "Changes the style of a group"}, color-set {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 51, :column 7, :end-line 51, :end-column 16, :arglists (quote ([group]))}, :name patterning.groups/color-set, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 16, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, filter-sshapes-in-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 90, :column 7, :end-line 90, :end-column 30, :arglists (quote ([p? group])), :doc "this removes entire sshapes from the group that have points that don't match the criteria"}, :name patterning.groups/filter-sshapes-in-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 30, :method-params ([p? group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? group])), :doc "this removes entire sshapes from the group that have points that don't match the criteria"}, width {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 64, :column 7, :end-line 64, :end-column 12, :arglists (quote ([group]))}, :name patterning.groups/width, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 12, :method-params ([group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group]))}, reframe-scaler {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 59, :column 7, :end-line 59, :end-column 21, :arglists (quote ([sshape])), :doc "Takes a sshape and returns a scaler to reduce it to usual viewport coords [-1 -1][1 1] "}, :name patterning.groups/reframe-scaler, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 21, :method-params ([sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sshape])), :doc "Takes a sshape and returns a scaler to reduce it to usual viewport coords [-1 -1][1 1] "}, translate-to {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([x y group]))}, :name patterning.groups/translate-to, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 19, :method-params ([x y group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y group]))}, flatten-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 53, :column 7, :end-line 53, :end-column 20, :arglists (quote ([group] [style group])), :doc "Flatten all sshapes into a single sshape", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([group] [style group]), :arglists ([group] [style group]), :arglists-meta (nil nil)}}, :name patterning.groups/flatten-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([group] [style group]), :arglists ([group] [style group]), :arglists-meta (nil nil)}, :method-params ([group] [style group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists ([group] [style group]), :doc "Flatten all sshapes into a single sshape"}, empty-group {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 20, :column 7, :end-line 20, :end-column 18, :arglists (quote ([]))}, :name patterning.groups/empty-group, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, wobble {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 36, :column 7, :end-line 36, :end-column 13, :arglists (quote ([noise group]))}, :name patterning.groups/wobble, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 13, :method-params ([noise group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([noise group]))}, rotate {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([da group]))}, :name patterning.groups/rotate, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 13, :method-params ([da group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([da group]))}, translate {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([dx dy group]))}, :name patterning.groups/translate, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 16, :method-params ([dx dy group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dx dy group]))}, clip-sshape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/clojurescript-4-gdg/resources/public/js/compiled/devcards_out/patterning/groups.cljc", :line 96, :column 7, :end-line 96, :end-column 18, :arglists (quote ([p? {:keys [style points]}])), :doc "takes a predicate and a sshape, splits the sshape at any point which doesn't meet the predicate, return group"}, :name patterning.groups/clip-sshape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/groups.cljc", :end-column 18, :method-params ([p? p__34933]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? {:keys [style points]}])), :doc "takes a predicate and a sshape, splits the sshape at any point which doesn't meet the predicate, return group"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:stroke :else :fill :points :style}, :order [:style :points :stroke :fill :else]}, :doc nil}
{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name patterning.view, :imports nil, :requires {string clojure.string, clojure.string clojure.string, patterning.maths patterning.maths, strings patterning.strings, patterning.strings patterning.strings, patterning.sshapes patterning.sshapes, patterning.groups patterning.groups, patterning.color patterning.color}, :uses {p-color patterning.color, stroke-gen patterning.color, tx patterning.maths, fill-gen patterning.color}, :defs {make-txpt {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([[vx1 vy1 vx2 vy2] [wx1 wy1 wx2 wy2]])), :doc "first argument is viewport (left, top, right, bottom), second is window (left, top, right, bottom)\n   returns a mapping function from viewport to window"}, :name patterning.view/make-txpt, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 16, :method-params ([p__34836 p__34837]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[vx1 vy1 vx2 vy2] [wx1 wy1 wx2 wy2]])), :doc "first argument is viewport (left, top, right, bottom), second is window (left, top, right, bottom)\n   returns a mapping function from viewport to window"}, project-points {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 20, :column 7, :end-line 20, :end-column 21, :arglists (quote ([txpt points] [viewport window points])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([txpt points] [viewport window points]), :arglists ([txpt points] [viewport window points]), :arglists-meta (nil nil)}}, :name patterning.view/project-points, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([txpt points] [viewport window points]), :arglists ([txpt points] [viewport window points]), :arglists-meta (nil nil)}, :method-params ([txpt points] [viewport window points]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists ([txpt points] [viewport window points])}, transformed-sshape {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 25, :column 7, :end-line 25, :end-column 25, :arglists (quote ([txpt {:keys [style points]}]))}, :name patterning.view/transformed-sshape, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 25, :method-params ([txpt p__34865]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([txpt {:keys [style points]}]))}, sshape-to-SVG-path {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 32, :column 7, :end-line 32, :end-column 25, :arglists (quote ([txpt sshape]))}, :name patterning.view/sshape-to-SVG-path, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 25, :method-params ([txpt sshape]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([txpt sshape]))}, inner-xml-tpl {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 57, :column 7, :end-line 57, :end-column 20, :arglists (quote ([txpt width height group]))}, :name patterning.view/inner-xml-tpl, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 20, :method-params ([txpt width height group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 4, :fn-var true, :arglists (quote ([txpt width height group]))}, xml-tpl {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 59, :column 7, :end-line 59, :end-column 14, :arglists (quote ([txpt width height group])), :doc "svg 'template' which also flips the coordinate system via http://www.braveclojure.com/organization/"}, :name patterning.view/xml-tpl, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 14, :method-params ([txpt width height group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 4, :fn-var true, :arglists (quote ([txpt width height group])), :doc "svg 'template' which also flips the coordinate system via http://www.braveclojure.com/organization/"}, make-svg {:protocol-inline nil, :meta {:file "/media/phil/MyData/new_dev_tree/teaching/googdevgroup/present/resources/public/js/compiled/devcards_out/patterning/view.cljc", :line 66, :column 7, :end-line 66, :end-column 15, :arglists (quote ([viewport window width height group] [width height group])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([viewport window width height group] [width height group]), :arglists ([viewport window width height group] [width height group]), :arglists-meta (nil nil)}}, :name patterning.view/make-svg, :variadic false, :file "resources/public/js/compiled/devcards_out/patterning/view.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([viewport window width height group] [width height group]), :arglists ([viewport window width height group] [width height group]), :arglists-meta (nil nil)}, :method-params ([viewport window width height group] [width height group]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 5, :fn-var true, :arglists ([viewport window width height group] [width height group])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:bezier :stroke-weight :stroke :fill :points :style}, :order [:style :points :bezier :stroke :stroke-weight :fill]}, :doc nil}